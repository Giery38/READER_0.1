using DevExpress.Data.Details;
using ExcelDataReader;
using Microsoft.WindowsAPICodePack.Dialogs;
using READER_0._1.Model.Excel.Settings;
using READER_0._1.Tools;
using READER_0._1.View.Elements;
using READER_0._1.View.Tools;
using READER_0._1.ViewModel.ViewElement;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace READER_0._1.View
{
    /// <summary>
    /// Логика взаимодействия для ExcelView.xaml
    /// </summary>
    public partial class ExcelView : UserControl
    {
        public ExcelView()
        {
            InitializeComponent();           
        }        
       
        public static readonly DependencyProperty DropFileCommandProperty =
            DependencyProperty.RegisterAttached(nameof(DropFileCommand), typeof(ICommand), typeof(ExcelView), new PropertyMetadata(null));      
        public static readonly DependencyProperty SizeChangeCommandProperty =
           DependencyProperty.RegisterAttached(nameof(SizeChangeCommand), typeof(ICommand), typeof(ExcelView), new PropertyMetadata(null));
        public ICommand DropFileCommand
        {
            get
            {
                return (ICommand)GetValue(DropFileCommandProperty);
            }
            set
            {
                SetValue(DropFileCommandProperty, value);
            }
        }       
        public ICommand SizeChangeCommand
        {
            get
            {
                return (ICommand)GetValue(SizeChangeCommandProperty);
            }
            set
            {
                SetValue(SizeChangeCommandProperty, value);
            }
        }

        private void FolderFiles_Drop(object sender, DragEventArgs e)
        {            
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
            ListView listViewSender = (ListView)sender;
            (Guid folderId, string[] filePaths) addedFiles = ((Guid)listViewSender.Tag, files);           
            DropFileCommand?.Execute(addedFiles);                                 
        }
        private void OpenFolder_SelectionChanged(object sender, EventArgs e)
        {

        }     
        
        private void Table_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dataGrid = sender as DataGrid;
            if (dataGrid != null)
            {
                ScrollViewer scrollViewer = GetScrollViewer(dataGrid);
                if (scrollViewer != null)
                {
                    scrollViewer.ScrollToVerticalOffset(0);
                }
            }
        }
       
        private ScrollViewer GetScrollViewer(DependencyObject parent)
        {
            int childCount = VisualTreeHelper.GetChildrenCount(parent);
            for (int i = 0; i < childCount; i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(parent, i);
                if (child is ScrollViewer)
                {
                    return (ScrollViewer)child;
                }
                else
                {
                    ScrollViewer result = GetScrollViewer(child);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }
            return null;
        }
        
        private void ListFiles_ListViewItem_PreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            ListViewItem listViewItem = sender as ListViewItem;            
            ListView listView = ItemsControl.ItemsControlFromItemContainer(listViewItem) as ListView;
            object selectedObject = listView.SelectedItem;
            ListViewItem selectedItem = listView.ItemContainerGenerator.ContainerFromItem(selectedObject) as ListViewItem;
            if (selectedItem != null)
            {
                
            }
            e.Handled = true;
        }

        private void ListFiles_ListViewItem_ContextMenuClosing(object sender, ContextMenuEventArgs e)
        {
           
        }

        private void DeleteFolderButton_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;           
            ConfirmDialog confirmDialog = new ConfirmDialog($"Вы уверены, что хотите удалить папку {button.CommandParameter}?");
            confirmDialog.ShowDialog();
            bool choiceResult = confirmDialog.IsConfirmed;
            if (button.Command.CanExecute(choiceResult))
            {            
                button.Command.Execute(button.CommandParameter);
            }
        }
        private void SettingsFolderButton_Click(object sender, RoutedEventArgs e)
        {
            ExcelSettingsDialog excelSettingsDialog = new ExcelSettingsDialog();
            Button button = sender as Button;
            excelSettingsDialog.ExcelSettingsRead = button.CommandParameter as ExcelSettingsRead;
            excelSettingsDialog.ShowDialog();
        }       
        private void ShowReportButton_Click(object sender, RoutedEventArgs e)
        {
            Expander expander = Helper.FindChild<Expander>(InfoGrid, "ReportMenuExpander");           
            expander.IsExpanded = !expander.IsExpanded;
        }       
    }       
      
}
