using ExcelDataReader;
using Microsoft.WindowsAPICodePack.Dialogs;
using READER_0._1.Tools;
using READER_0._1.View.Elements;
using READER_0._1.ViewModel.ViewElement;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace READER_0._1.View
{
    /// <summary>
    /// Логика взаимодействия для ExelView.xaml
    /// </summary>
    public partial class ExelView : UserControl
    {
        public ExelView()
        {
            InitializeComponent();
        }        
        public static readonly DependencyProperty FolderViewNameChangeProperty =
           DependencyProperty.RegisterAttached("FolderViewNameChangeCommand", typeof(ICommand), typeof(ExelView), new PropertyMetadata(null));
        public static readonly DependencyProperty DropFileCommandProperty =
            DependencyProperty.RegisterAttached("DropFileCommand", typeof(ICommand), typeof(ExelView), new PropertyMetadata(null));      
        public static readonly DependencyProperty SizeChangeCommandProperty =
           DependencyProperty.RegisterAttached("SizeChangeCommand", typeof(ICommand), typeof(ExelView), new PropertyMetadata(null));
        public ICommand DropFileCommand
        {
            get
            {
                return (ICommand)GetValue(DropFileCommandProperty);
            }
            set
            {
                SetValue(DropFileCommandProperty, value);
            }
        }
        public ICommand FolderViewNameChangeCommand
        {
            get
            {
                return (ICommand)GetValue(FolderViewNameChangeProperty);
            }
            set
            {
                SetValue(FolderViewNameChangeProperty, value);
            }
        }
        public ICommand SizeChangeCommand
        {
            get
            {
                return (ICommand)GetValue(SizeChangeCommandProperty);
            }
            set
            {
                SetValue(SizeChangeCommandProperty, value);
            }
        }

        private void FolderFiles_Drop(object sender, DragEventArgs e)
        {            
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
            ListView listViewSender = (ListView)sender;
            (string folderName, string[] filePaths) addedFiles = (listViewSender.Tag.ToString(), files);           
            DropFileCommand?.Execute(addedFiles);                                 
        }
        private void OpenFolder_SelectionChanged(object sender, EventArgs e)
        {

        }
        private void FolderFiles_NameChange(object sender, TextChangedEventArgs e)
        {                                         
            TextBox textBox = sender as TextBox;
            (string oldName, string newName) info = (textBox.Tag.ToString(), textBox.Text.ToString());
            if (FolderViewNameChangeCommand?.CanExecute(info) == true)
            {
                FolderViewNameChangeCommand?.Execute(info);
            }   
        }
        
        private void Table_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dataGrid = sender as DataGrid;
            if (dataGrid != null)
            {
                ScrollViewer scrollViewer = GetScrollViewer(dataGrid);
                if (scrollViewer != null)
                {
                    scrollViewer.ScrollToVerticalOffset(0);
                }
            }
        }
       
        private ScrollViewer GetScrollViewer(DependencyObject parent)
        {
            int childCount = VisualTreeHelper.GetChildrenCount(parent);
            for (int i = 0; i < childCount; i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(parent, i);
                if (child is ScrollViewer)
                {
                    return (ScrollViewer)child;
                }
                else
                {
                    ScrollViewer result = GetScrollViewer(child);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }
            return null;
        }
        
        private void ListFiles_ListViewItem_PreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            ListViewItem listViewItem = sender as ListViewItem;            
            ListView listView = ItemsControl.ItemsControlFromItemContainer(listViewItem) as ListView;
            object selectedObject = listView.SelectedItem;
            ListViewItem selectedItem = listView.ItemContainerGenerator.ContainerFromItem(selectedObject) as ListViewItem;
            if (selectedItem != null)
            {
                
            }
            e.Handled = true;
        }

        private void ListFiles_ListViewItem_ContextMenuClosing(object sender, ContextMenuEventArgs e)
        {
           
        }

        private void DeleteFolderButton_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            var confirmDialog = new ConfirmDialog($"Вы уверены, что хотите удалить папку {button.CommandParameter}?");
            confirmDialog.ShowDialog();
            bool choiceResult = confirmDialog.IsConfirmed;
            if (button.Command.CanExecute(choiceResult))
            {
                // Выполнение команды
                button.Command.Execute(button.CommandParameter);
            }
        }     
        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            var textBox = (TextBox)sender;
            var bindingExpression = textBox.GetBindingExpression(TextBox.TextProperty);
            if (bindingExpression == null)
            {
                return;
            }
            FolderView folderView = bindingExpression.DataItem as FolderView;                                   
            if (folderView.CorrectName == false)
            {
                (string oldName, string newName) info = (textBox.Tag.ToString(), folderView.Name.ToString());
                if (FolderViewNameChangeCommand?.CanExecute(info) == true)
                {
                    FolderViewNameChangeCommand?.Execute(info);
                }
            }
        }
    }
    public static class ScrollViewerBinding
    {
        /// <summary>
        /// VerticalOffset attached property
        /// </summary>
        public static readonly DependencyProperty VerticalOffsetProperty =
            DependencyProperty.RegisterAttached("VerticalOffset", typeof(double),
            typeof(ScrollViewerBinding), new FrameworkPropertyMetadata(double.NaN,
                FrameworkPropertyMetadataOptions.BindsTwoWayByDefault,
                OnVerticalOffsetPropertyChanged));

        /// <summary>
        /// Just a flag that the binding has been applied.
        /// </summary>
        private static readonly DependencyProperty VerticalScrollBindingProperty =
            DependencyProperty.RegisterAttached("VerticalScrollBinding", typeof(bool?), typeof(ScrollViewerBinding));

        public static double GetVerticalOffset(DependencyObject depObj)
        {
            return (double)depObj.GetValue(VerticalOffsetProperty);
        }

        public static void SetVerticalOffset(DependencyObject depObj, double value)
        {
            depObj.SetValue(VerticalOffsetProperty, value);
        }

        private static void OnVerticalOffsetPropertyChanged(DependencyObject d,
            DependencyPropertyChangedEventArgs e)
        {
            ScrollViewer scrollViewer = d as ScrollViewer;
            if (scrollViewer == null)
                return;

            BindVerticalOffset(scrollViewer);
            scrollViewer.ScrollToVerticalOffset((double)e.NewValue);
        }

        public static void BindVerticalOffset(ScrollViewer scrollViewer)
        {
            if (scrollViewer.GetValue(VerticalScrollBindingProperty) != null)
                return;

            scrollViewer.SetValue(VerticalScrollBindingProperty, true);
            scrollViewer.ScrollChanged += (s, se) =>
            {
                if (se.VerticalChange == 0)
                    return;
                SetVerticalOffset(scrollViewer, se.VerticalOffset);
            };
        }
    }

    public static class ActualSizeBinding // https://stackoverflow.com/questions/63860555/canvas-actualwidth-and-actualheight-passed-into-viewmodel-in-mvvm-way
    {
        
        public static readonly DependencyProperty ActiveProperty = DependencyProperty.RegisterAttached(
            "Active",
            typeof(bool),
            typeof(ActualSizeBinding),
            new FrameworkPropertyMetadata(OnActualSizePropertyChanged));

        public static bool GetActive(FrameworkElement frameworkElement)
        {
            return (bool)frameworkElement.GetValue(ActiveProperty);
        }

        public static void SetActive(FrameworkElement frameworkElement, bool active)
        {
            frameworkElement.SetValue(ActiveProperty, active);
        }    

        public static readonly DependencyProperty BoundActualWidthProperty = DependencyProperty.RegisterAttached(
            "BoundActualWidth",
            typeof(double),
            typeof(ActualSizeBinding));

        public static double GetBoundActualWidth(FrameworkElement frameworkElement)
        {
            return (double)frameworkElement.GetValue(BoundActualWidthProperty);
        }

        public static void SetBoundActualWidth(FrameworkElement frameworkElement, double width)
        {
            frameworkElement.SetValue(BoundActualWidthProperty, width);
        }

        public static readonly DependencyProperty BoundActualHeightProperty = DependencyProperty.RegisterAttached(
            "BoundActualHeight",
            typeof(double),
            typeof(ActualSizeBinding));

        public static double GetBoundActualHeight(FrameworkElement frameworkElement)
        {
            return (double)frameworkElement.GetValue(BoundActualHeightProperty);
        }

        public static void SetBoundActualHeight(FrameworkElement frameworkElement, double height)
        {
            frameworkElement.SetValue(BoundActualHeightProperty, height);
        }
      
        private static void OnActualSizePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
        {
            if (!(dependencyObject is FrameworkElement frameworkElement))
            {
                return;
            }

            if ((bool)e.NewValue)
            {
                frameworkElement.SizeChanged += OnFrameworkElementSizeChanged;
                UpdateObservedSizesForFrameworkElement(frameworkElement);
            }
            else
            {
                frameworkElement.SizeChanged -= OnFrameworkElementSizeChanged;
            }         
        }

        private static void OnFrameworkElementSizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (sender is FrameworkElement frameworkElement)
            {
                UpdateObservedSizesForFrameworkElement(frameworkElement);
            }
        }

        private static void UpdateObservedSizesForFrameworkElement(FrameworkElement frameworkElement)
        {
            frameworkElement.SetCurrentValue(BoundActualWidthProperty, frameworkElement.ActualWidth);
            frameworkElement.SetCurrentValue(BoundActualHeightProperty, frameworkElement.ActualHeight);
        }
    }
      
}
